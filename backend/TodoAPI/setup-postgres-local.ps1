# üêò Script de Configura√ß√£o PostgreSQL Local
# Este script automatiza a configura√ß√£o do PostgreSQL para desenvolvimento local

param(
    [switch]$UseDocker = $true,
    [switch]$SkipDockerCheck = $false
)

Write-Host "üöÄ Configurando PostgreSQL Local para TodoAPI" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green

# Fun√ß√£o para verificar se um comando existe
function Test-Command($cmdname) {
    return [bool](Get-Command -Name $cmdname -ErrorAction SilentlyContinue)
}

# Fun√ß√£o para aguardar entrada do usu√°rio
function Wait-UserInput($message) {
    Write-Host $message -ForegroundColor Yellow
    Read-Host "Pressione Enter para continuar"
}

# Verificar se estamos na pasta correta
if (-not (Test-Path "TodoAPI.csproj")) {
    Write-Host "‚ùå Erro: Execute este script na pasta raiz do projeto TodoAPI" -ForegroundColor Red
    exit 1
}

if ($UseDocker) {
    Write-Host "üê≥ Configurando PostgreSQL via Docker..." -ForegroundColor Cyan
    
    # Verificar Docker
    if (-not $SkipDockerCheck) {
        if (-not (Test-Command "docker")) {
            Write-Host "‚ùå Docker n√£o encontrado. Instale o Docker Desktop primeiro." -ForegroundColor Red
            Write-Host "üì• Download: https://www.docker.com/products/docker-desktop" -ForegroundColor Yellow
            exit 1
        }
        
        if (-not (Test-Command "docker-compose")) {
            Write-Host "‚ùå Docker Compose n√£o encontrado." -ForegroundColor Red
            exit 1
        }
    }
    
    # Verificar se docker-compose.yml existe
    if (-not (Test-Path "docker-compose.yml")) {
        Write-Host "‚ùå Arquivo docker-compose.yml n√£o encontrado." -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ Docker encontrado" -ForegroundColor Green
    
    # Parar containers existentes
    Write-Host "üõë Parando containers existentes..." -ForegroundColor Yellow
    docker-compose down 2>$null
    
    # Iniciar PostgreSQL
    Write-Host "üöÄ Iniciando PostgreSQL..." -ForegroundColor Yellow
    docker-compose up -d postgres
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ PostgreSQL iniciado com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro ao iniciar PostgreSQL" -ForegroundColor Red
        exit 1
    }
    
    # Aguardar PostgreSQL ficar pronto
    Write-Host "‚è≥ Aguardando PostgreSQL ficar pronto..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10
    
    # Verificar se est√° rodando
    $containerStatus = docker ps --filter "name=todoapi-postgres" --format "{{.Status}}"
    if ($containerStatus -match "Up") {
        Write-Host "‚úÖ PostgreSQL est√° rodando!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå PostgreSQL n√£o est√° rodando corretamente" -ForegroundColor Red
        Write-Host "üìã Logs do container:" -ForegroundColor Yellow
        docker logs todoapi-postgres
        exit 1
    }
    
} else {
    Write-Host "üñ•Ô∏è Configurando PostgreSQL via instala√ß√£o manual..." -ForegroundColor Cyan
    Write-Host "‚ö†Ô∏è  Certifique-se de que o PostgreSQL est√° instalado e rodando" -ForegroundColor Yellow
    
    # Verificar se psql est√° dispon√≠vel
    if (-not (Test-Command "psql")) {
        Write-Host "‚ùå psql n√£o encontrado. Instale o PostgreSQL primeiro." -ForegroundColor Red
        Write-Host "üì• Download: https://www.postgresql.org/download/windows/" -ForegroundColor Yellow
        exit 1
    }
    
    Write-Host "‚úÖ PostgreSQL encontrado" -ForegroundColor Green
}

# Verificar .NET EF Tools
Write-Host "üîß Verificando Entity Framework Tools..." -ForegroundColor Cyan
if (-not (Test-Command "dotnet-ef")) {
    Write-Host "üì¶ Instalando Entity Framework Tools..." -ForegroundColor Yellow
    dotnet tool install --global dotnet-ef
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erro ao instalar Entity Framework Tools" -ForegroundColor Red
        exit 1
    }
}

# Restaurar pacotes
Write-Host "üì¶ Restaurando pacotes NuGet..." -ForegroundColor Yellow
dotnet restore
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao restaurar pacotes" -ForegroundColor Red
    exit 1
}

# Compilar projeto
Write-Host "üî® Compilando projeto..." -ForegroundColor Yellow
dotnet build
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro na compila√ß√£o" -ForegroundColor Red
    exit 1
}

# Aplicar migra√ß√µes
Write-Host "üóÑÔ∏è Aplicando migra√ß√µes..." -ForegroundColor Yellow
dotnet ef database update
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao aplicar migra√ß√µes" -ForegroundColor Red
    Write-Host "üí° Verifique se o PostgreSQL est√° rodando e as credenciais est√£o corretas" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Migra√ß√µes aplicadas com sucesso!" -ForegroundColor Green

# Testar conex√£o criando uma tarefa de teste
Write-Host "üß™ Testando conex√£o..." -ForegroundColor Yellow

# Aguardar um pouco para garantir que a API est√° pronta
Start-Sleep -Seconds 5

Write-Host "üéâ Configura√ß√£o conclu√≠da com sucesso!" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green
Write-Host ""
Write-Host "üöÄ Para executar a aplica√ß√£o:" -ForegroundColor Cyan
Write-Host "   dotnet run" -ForegroundColor White
Write-Host ""
Write-Host "üåê Acessos dispon√≠veis:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ API: https://localhost:5001" -ForegroundColor White
Write-Host "   ‚Ä¢ Swagger: https://localhost:5001/swagger" -ForegroundColor White
Write-Host ""
Write-Host "üß™ Teste r√°pido:" -ForegroundColor Cyan
Write-Host '   curl -X POST "https://localhost:5001/api/Todo" -H "Content-Type: application/json" -d "{\"descricao\": \"Teste inicial\"}"' -ForegroundColor White
Write-Host ""
Write-Host "üìö Documenta√ß√£o completa:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ POSTGRES_LOCAL_SETUP.md" -ForegroundColor White
Write-Host "   ‚Ä¢ DATABASE_SETUP.md" -ForegroundColor White
Write-Host ""

if ($UseDocker) {
    Write-Host "üê≥ Comandos Docker √∫teis:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Parar: docker-compose down" -ForegroundColor White
    Write-Host "   ‚Ä¢ Ver logs: docker logs todoapi-postgres" -ForegroundColor White
    Write-Host "   ‚Ä¢ Resetar dados: docker-compose down -v" -ForegroundColor White
    Write-Host ""
}

Wait-UserInput "Pressione Enter para finalizar"
